<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Random Name

enum MENU_STATES    {
    NORMAL, TYPING
}

enum MENU_TYPES {
    MAIN, CONNECT, DIRECT_CONNECT, HOST, OPTIONS
}

stateCurrent = MENU_STATES.NORMAL;

Toggle[0] = "OFF";
Toggle[1] = "ON";

menuSelected = 0;
menuIndex = 0;
menuTypeBlink = false;
menuTypeAdd = "";
alarm[0] = fs(0.25);

//Main Menu
menuArray[MENU_TYPES.MAIN, 0] = "CONNECT";
menuArray[MENU_TYPES.MAIN, 1] = "HOST";
menuArray[MENU_TYPES.MAIN, 2] = "OPTIONS";
menuArray[MENU_TYPES.MAIN, 3] = "QUIT";

//Connect
menuArray[MENU_TYPES.CONNECT, 0] = "BROWSER";
menuArray[MENU_TYPES.CONNECT, 1] = "DIRECT CONNECT";
menuArray[MENU_TYPES.CONNECT, 2] = "BACK";

//Direct Connect
menuArray[MENU_TYPES.DIRECT_CONNECT, 0] = "IP: " + g.settingIP;
menuArray[MENU_TYPES.DIRECT_CONNECT, 1] = "PORT: " + string(g.settingPort);
menuArray[MENU_TYPES.DIRECT_CONNECT, 2] = "CONNECT";
menuArray[MENU_TYPES.DIRECT_CONNECT, 3] = "BACK";

//Host
menuArray[MENU_TYPES.HOST, 0] = "START";
menuArray[MENU_TYPES.HOST, 1] = "BACK";

//Options
menuArray[MENU_TYPES.OPTIONS, 0] = "NAME: " + g.settingName;
menuArray[MENU_TYPES.OPTIONS, 1] = "BACK";

//Fill Out Scales
for (var i = array_height_2d(menuArray); i &gt;= 0; i --)   {
    for (var j = array_length_2d(menuArray, i); j &gt;= 0; j --)    {
        menuArrayScale[i, j] = 1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Character Blink

menuTypeBlink = !menuTypeBlink;
if menuTypeBlink
    menuTypeAdd = "_";
else
    menuTypeAdd = "";
    
alarm[0] = fs(0.25);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Do Stuff

switch (stateCurrent)   {
    case MENU_STATES.NORMAL:
        MenuStateNormal();
        break;
        
    case MENU_STATES.TYPING:
        MenuStateTyping();
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Things

var _shadowLength = wave(1, 8, 1, 0);
var _colourMix = wave(0, 1, 3, 0);
var _scaleBase = 1;
var _Border = (18 * _scaleBase);
var _posX = _Border;
var _posY = room_height - _Border;

draw_set_font(fontMenu);
for (var i = array_length_2d(menuArray, menuIndex) - 1; i &gt;= 0; i --)    {
    
    var _String = menuArray[menuIndex, i];
    if (menuSelected == i)  {
        var _Colour = merge_colour(c_blue, c_aqua, _colourMix);
        menuArrayScale[menuIndex, i] = lerp(menuArrayScale[menuIndex, i], 1.4, 0.125);
        
        if stateCurrent == MENU_STATES.TYPING   {
            _String += " " + keyboard_string + menuTypeAdd;
        }
    }   else    {
        var _Colour = merge_colour(c_white, c_gray, _colourMix);
        menuArrayScale[menuIndex, i] = lerp(menuArrayScale[menuIndex, i], 1, 0.1);
    }
    var _Scale = _scaleBase * menuArrayScale[menuIndex, i];
    draw_text_parameters(fa_left, fa_bottom, _posX, _posY, _String, 1, _Colour, _shadowLength, _Scale);
    _posY -= (string_height(_String) * 1.15) * _Scale;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
